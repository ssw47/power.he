
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "powerHE"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "powerHE-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('powerHE')

Attaching package: ‘powerHE’

The following object is masked from ‘package:base’:

    format

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("HE")
> ### * HE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HE
> ### Title: Hierarchical Endpoints
> ### Aliases: HE
> ### Keywords: endpoints
> 
> ### ** Examples
> 
> # Two continuous hierarchical endpoints:
> # The marginal distributions for Y1A and Y1B are normal distributions with
> # means 15 and 4, respectively, and standard deviations of 60. For Y2A and
> # Y2B, the marginal distributions are normal distributions with means 40 and
> # 30, respectively, and standard deviations of 24. For both endpoints, the
> # threshold to win is chosen to be the same, with both delta1 and delta2
> # equal to 5.
> # Find the required sample size to achieve a power of 0.85 for win ratios.
> 
> endpoints_input <- list(
+   list(type = "Continuous",
+        mu.a = 15,
+        mu.b = 4,
+        sd.a = 60,
+        sd.b = 60,
+        delta = 5,
+        continuous.winning.direction = "GT"),
+   list(type = "Continuous",
+        mu.a = 40,
+        mu.b = 30,
+        sd.a = 24,
+        sd.b = 24,
+        delta = 5,
+        continuous.winning.direction = "GT")
+ )
> HE(endpoints_input,
+     power = 0.85,
+     alpha = 0.05,
+     rratio = 0.5,
+     output = "ALL")
$p_tie
[1] 0.04659588 0.11217644

$p_tie_overall
[1] 0.00522696

$wr
[1] 1.242153 1.696374

$wr_c
[1] 1.257971

$wo
[1] 1.229575 1.595017

$wo_c
[1] 1.25645

$nb
[1] 0.1029679 0.2292922

$nb_c
[1] 0.1136519

$door
[1] 0.5514839 0.6146461

$door_c
[1] 0.556826

$n.wr
[1] 919

$n.wo
[1] 919

$n.nb
[1] 927

$n.door
[1] 927

> 
> # Two binary hierarchical endpoints:
> # The marginal probabilities for Y1A and Y1B are binomial distributions with
> # a success probability of 0.90 and 0.85, respectively, for one trial. For
> # Y2A and Y2B, the marginal probabilities are binomial distributions with
> # success probabilities of 0.80 and 0.75, respectively, for one trial.
> # Find the achieved power for win ratios with a sample size of 1098.
> 
> endpoints_input <- list(
+   list(type = "Binary",
+       pi.a = 0.9,
+       pi.b = 0.85,
+       binary.winning.direction = "GT"),
+   list(type = "Binary",
+       pi.a = 0.8,
+       pi.b = 0.75,
+       binary.winning.direction = "GT")
+ )
> HE(endpoints_input,
+     sample.size = 1098,
+     alpha = 0.05,
+     rratio = 0.5,
+     output = "ALL")
$p_tie
[1] 0.78 0.65

$p_tie_overall
[1] 0.507

$wr
[1] 1.588235 1.333333

$wr_c
[1] 1.440594

$wo
[1] 1.105263 1.105263

$wo_c
[1] 1.19539

$nb
[1] 0.05 0.05

$nb_c
[1] 0.089

$door
[1] 0.525 0.525

$door_c
[1] 0.5445

$power_c.WR
[1] 0.8498845

$power_c.WO
[1] 0.8439836

$power_c.NB
[1] 0.8420948

$power_c.DOOR
[1] 0.8420948

> 
> # Binary and continuous hierarchical endpoints:
> # The marginal probabilities for Y1A and Y1B are binomial distributions with
> # success probabilities of 0.96 and 0.95, respectively, for one trial. For
> # Y2A and Y2B, the marginal distributions are normal distributions with means
> # 36 and 31, respectively, and standard deviations of 24.
> # Find the required sample size to achieve a power of 0.85 for win ratios.
> 
> endpoints_input <- list(
+   list(type = "Binary",
+        pi.a = 0.96,
+        pi.b = 0.95,
+        binary.winning.direction = "GT"),
+   list(type = "Continuous",
+        mu.a = 36,
+        mu.b = 31,
+        sd.a = 24,
+        sd.b = 24,
+        delta = 5,
+        continuous.winning.direction = "GT")
+ )
> HE(endpoints_input,
+     power = 0.85,
+     alpha = 0.05,
+     rratio = 0.5,
+     output = "ALL")
$p_tie
[1] 0.9140000 0.1158609

$p_tie_overall
[1] 0.1058969

$wr
[1] 1.263158 1.301612

$wr_c
[1] 1.297856

$wo
[1] 1.020202 1.262087

$wo_c
[1] 1.26218

$nb
[1] 0.0100000 0.1158609

$nb_c
[1] 0.1158969

$door
[1] 0.5050000 0.5579304

$door_c
[1] 0.5579484

$n.wr
[1] 871

$n.wo
[1] 873

$n.nb
[1] 881

$n.door
[1] 881

> 
> # Time to death and number of hospitalizations as hierarchical endpoints:
> # The marginal distributions for Y1A and Y1B are exponential distributions
> # with rate parameters of 0.16 and 0.20, respectively. For Y2A, the marginal
> # distribution is a Poisson distribution with a mean of 0.75, and for Y2B, it
> # is a normal distribution with a mean of 1.1. The follow-up time for all
> # measurements is 5 years.
> # Find the achieved power for win ratios with a sample size of 770.
> 
> endpoints_input <- list(
+   list(type = "TTE",
+        tte.winning.direction = "GT",
+        s = 5,
+        hr.a = 0.8,
+        er.b = 0.63212),
+   list(type = "Count",
+        count.winning.direction = "LT",
+        lam.a = 0.75,
+        lam.b = 1.1)
+ )
> HE(endpoints_input,
+     sample.size = 770,
+     alpha = 0.05,
+     rratio = 0.5,
+     output = "ALL")
$p_tie
[1] 0.1652993 0.3162960

$p_tie_overall
[1] 0.05228352

$wr
[1] 1.250000 1.758779

$wr_c
[1] 1.300596

$wo
[1] 1.204451 1.463197

$wo_c
[1] 1.282658

$nb
[1] 0.09274452 0.18804699

$nb_c
[1] 0.1238286

$door
[1] 0.5463723 0.5940235

$door_c
[1] 0.5619143

$power_c.WR
[1] 0.8501314

$power_c.WO
[1] 0.8497207

$power_c.NB
[1] 0.8461036

$power_c.DOOR
[1] 0.8461036

> 
> # Two ordinal hierarchical endpoints, each with 3 ordinal categories:
> # The marginal distributions for Y1A and Y1B are multinomial distributions
> # with probabilities for the three categories (1, 2, 3) given by
> # (0.45, 0.30, 0.25) for Y1A and (0.50, 0.30, 0.20) for Y1B. For Y2A and Y2B,
> # the marginal distributions are multinomial distributions with probabilities
> # (0.30, 0.30, 0.40) for Y2A and (0.40, 0.30, 0.30) for Y2B. The probabilities
> # represent the likelihood of a subject being in categories 1, 2, or 3. We
> # assume that a subject in a higher ordinal category wins over a subject in a
> # lower ordinal category.
> # Find the required sample size to achieve a power of 0.85 for win ratios.
> 
> endpoints_input <- list(
+   list(type = "Ordinal",
+        pi.ordinal.a = c(0.45, 0.3, 0.25),
+        pi.ordinal.b = c(0.5, 0.3, 0.2),
+        ordinal.winning.direction = "GT"),
+   list(type = "Ordinal",
+        pi.ordinal.a = c(0.3, 0.3, 0.4),
+        pi.ordinal.b = c(0.4, 0.3, 0.3),
+        ordinal.winning.direction = "GT")
+ )
> HE(endpoints_input,
+     power = 0.85,
+     alpha = 0.05,
+     rratio = 0.5,
+     output = "ALL")
$p_tie
[1] 0.365 0.330

$p_tie_overall
[1] 0.12045

$wr
[1] 1.228070 1.481481

$wr_c
[1] 1.293182

$wo
[1] 1.139037 1.298851

$wo_c
[1] 1.253394

$nb
[1] 0.065 0.130

$nb_c
[1] 0.11245

$door
[1] 0.5325 0.5650

$door_c
[1] 0.556225

$n.wr
[1] 923

$n.wo
[1] 925

$n.nb
[1] 933

$n.door
[1] 933

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
Error in format(x[1L:3L], digits = 7L) : unused argument (digits = 7)
Calls: <Anonymous> -> <Anonymous>
Execution halted
